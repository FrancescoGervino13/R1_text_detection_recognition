FROM nvidia/cuda:12.9.0-devel-ubuntu24.04

ARG RELEASE
ARG LAUNCHPAD_BUILD_ARCH
ENV USER=user1
ARG PASSWORD=user1

RUN ln -fs /usr/share/zoneinfo/Europe/Rome /etc/localtime && \
    apt update &&\
    apt install --no-install-recommends -y -qq sudo git cmake && \
    rm -rf /var/lib/apt/lists/*

RUN addgroup ${USER} \
    && useradd -ms /bin/bash ${USER} -g ${USER} \
    && echo "${USER}:${PASSWORD}" | chpasswd \
    && usermod -a -G sudo ${USER} \
    && sed -i.bak -e 's/%sudo\s\+ALL=(ALL\(:ALL\)\?)\s\+ALL/%sudo ALL=NOPASSWD:ALL/g' /etc/sudoers

USER ${USER}
WORKDIR /home/${USER}

# # Installing python packages
# Can't use env.yml because cuda install asks to accept agreement
RUN sudo apt update && DEBIAN_FRONTEND=noninteractive sudo apt install ffmpeg libsm6 libxext6 -y

# ROS2 Install
ENV ROS_DISTRO=jazzy
RUN sudo apt update && sudo apt install -y locales && sudo locale-gen en_US en_US.UTF-8 \
    && sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 \
    && export LANG=en_US.UTF-8
    
RUN sudo apt install software-properties-common -y\
    && sudo add-apt-repository universe \
    && sudo apt update && sudo apt install curl -y
    
RUN sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg 
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null

RUN sudo apt update && sudo apt install ros-$ROS_DISTRO-ros-base \
    ros-$ROS_DISTRO-sensor-msgs ros-$ROS_DISTRO-geometry-msgs \
    ros-$ROS_DISTRO-action-msgs ros-$ROS_DISTRO-actionlib-msgs \
    ros-$ROS_DISTRO-nav2-msgs ros-$ROS_DISTRO-cv-bridge ros-$ROS_DISTRO-nav2-simple-commander ros-dev-tools -y

RUN sudo apt update && sudo apt install ros-$ROS_DISTRO-rmw-cyclonedds-cpp -y
ENV RMW_IMPLEMENTATION=rmw_cyclonedds_cpp

RUN echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> /home/${USER}/.bashrc

# VS code
RUN wget -O- https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor | sudo tee /usr/share/keyrings/vscode.gpg && \
    echo deb [arch=amd64 signed-by=/usr/share/keyrings/vscode.gpg] https://packages.microsoft.com/repos/vscode stable main | sudo tee /etc/apt/sources.list.d/vscode.list
RUN sudo apt update && sudo apt install -y code
# Install VisualStudio Code extensions
RUN code --install-extension ms-vscode.cpptools \
		--install-extension ms-vscode.cpptools-themes \
		--install-extension ms-vscode.cmake-tools \
                --install-extension ms-python.python \
                --install-extension eamodio.gitlens

# Git Setup
#ARG GIT_USERNAME
#ARG GIT_USER_EMAIL
#RUN git config --global user.name ${GIT_USERNAME} && git config --global user.email ${GIT_USER_EMAIL}
SHELL ["/bin/bash", "-c"]
# Installing python requirements
RUN sudo apt update && sudo apt install -y python3-pip python3-venv
# For python3
ENV PATH=/home/${USER}/.local/bin:$PATH
# Create virtual env to avoid --break-system-packages and for compatibility
RUN python3 -m venv /home/user1/work_env
RUN source /home/user1/work_env/bin/activate && python3 -m ensurepip --upgrade && \
    python3 -m pip install --upgrade setuptools
# Manually install dependencies
RUN sudo apt update && sudo apt install python3-opencv python3-shapely -y
RUN source /home/user1/work_env/bin/activate && pip install torch torchvision
RUN source /home/user1/work_env/bin/activate &&  pip install pyyaml lmdb matplotlib pyclipper pycocotools rapidfuzz scikit-image openai ninja
RUN source /home/user1/work_env/bin/activate && pip install numpy==1.26.4
#RUN pip3 install open3d "numpy==1.26.4" --break-system-packages

# Source ROS2
RUN echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> /home/${USER}/.bashrc

RUN git clone --recurse-submodules https://github.com/FrancescoGervino13/R1_text_detection_recognition.git
RUN source /home/user1/work_env/bin/activate pip install git+https://github.com/FrancescoGervino13/imgaug.git

RUN source /home/user1/work_env/bin/activate &&  pip install -U openmim
ENV FORCE_CUDA="1"
ENV MMCV_WITH_OPS=1
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=video,compute,utility
# mmdet supports compiler < gcc-12
RUN sudo apt update && \
    sudo apt install -y gcc-11 g++-11 &&\
    sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 110
ENV CC=/usr/bin/gcc-11
ENV CXX=/usr/bin/g++-11
ENV TORCH_CUDA_ARCH_LIST="8.6"
# We need to upgrade setuptools because mmcv is not supported in python3.12
RUN source /home/user1/work_env/bin/activate && python3 -m ensurepip --upgrade && \
    python3 -m pip install --upgrade setuptools
# mmdet supports compiler < gcc-12
RUN source /home/user1/work_env/bin/activate && export TORCH_CUDA_ARCH_LIST="8.6" && export FORCE_CUDA="1" && export MMCV_WITH_OPS=1 && mim install mmdet
RUN cd R1_text_detection_recognition/src/mmocr_ros/mmocr_ros/mmocr && \
    source /home/user1/work_env/bin/activate && pip install -v -e .
RUN cd R1_text_detection_recognition && \
    source /opt/ros/${ROS_DISTRO}/setup.bash && \
    colcon build --symlink-install
# Update env sources
RUN echo "source /home/user1/R1_text_detection_recognition/install/setup.bash" >> /home/${USER}/.bashrc
ENV PYTHONPATH=$PYTHONPATH:/home/user1/R1_text_detection_recognition/src/mmocr_ros/mmocr_ros/mmocr
# install platformdirs inside venv
RUN source /home/user1/work_env/bin/activate && pip install platformdirs
RUN echo "source /home/user1/work_env/bin/activate" >> ~/.bashrc
# Weights of mmocr
RUN wget https://download.openmmlab.com/mmocr/textdet/dbnetpp/dbnetpp_resnet50-dcnv2_fpnc_1200e_icdar2015/dbnetpp_resnet50-dcnv2_fpnc_1200e_icdar2015_20220829_230108-f289bd20.pth && \
    mkdir -p .cache/torch/hub/checkpoints && \
    mv dbnetpp_resnet50-dcnv2_fpnc_1200e_icdar2015_20220829_230108-f289bd20.pth .cache/torch/hub/checkpoints

## Cleanup
RUN sudo apt update && sudo apt install -y iproute2 unzip terminator bash-completion gedit locate && sudo apt clean && sudo rm -rf /var/lib/apt/lists/* && sudo updatedb
